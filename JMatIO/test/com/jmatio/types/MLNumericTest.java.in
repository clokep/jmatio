package com.jmatio.test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import java.io.File;
import java.util.Arrays;

import junit.framework.JUnit4TestAdapter;

import org.junit.Test;

import com.jmatio.io.MatFileReader;
import com.jmatio.io.MatFileWriter;
import com.jmatio.types.MLArray;
import com.jmatio.types.ML@matlabClassCamelCase@;

/**
 * The test suite for ML@matlabClassCamelCase@.
 *
 * @author Wojciech Gradkowski <wgradkowski@gmail.com>
 */
public class ML@matlabClassCamelCase@Test {
    @Test
    public void test@matlabClassCamelCase@() throws Exception {
        // The test file created in MATLAB that contains an array called "arr"
        // which contains the minimum and maximum values for @matlabClass@.
        String fileName = "test/@matlabClass@.mat";
        String arrName = "arr";
        MatFileReader mfr;

        @NumberClass@ min = @minValue@;
        @NumberClass@ max = @maxValue@;

        // Read array from file.
        mfr = new MatFileReader(fileName);
        ML@matlabClassCamelCase@ src = (ML@matlabClassCamelCase@)mfr.getMLArray(arrName);
        assertEquals("Test min. value from file: " + fileName + " array: " + arrName + ".",
                     min, src.get(0, 0));
        assertEquals("Test max. value from file:" + fileName + " array: " + arrName + ".",
                     max, src.get(0, 1));

        // Write the array out to a file.
        fileName = "@matlabClass@-tmp.mat";
        new MatFileWriter(fileName, Arrays.asList((MLArray)src));

        // Read the array in again.
        mfr = new MatFileReader(fileName);
        ML@matlabClassCamelCase@ ret = (ML@matlabClassCamelCase@)mfr.getMLArray(arrName);
        assertEquals("Test min. value from file: " + fileName + " array: " + arrName + ".",
                     min, ret.get(0, 0));
        assertEquals("Test max. value from file:" + fileName + " array: " + arrName + ".",
                     max, ret.get(0, 1));

        assertEquals("Test if array retrieved from " + fileName + " equals source array.",
                     src, ret);
    }

    /**
     * Tests <code>array1D</code> reading and writing.
     *
     * @throws IOException
     */
    @Test
    public void test@matlabClassCamelCase@Array() throws Exception {
        // Array name.
        String name = "arr";
        // File name in which array will be stored.
        String fileName = "@matlabClass@-tmp.mat";

        // Test column-packed vector.
        @primitive@[] src = new @primitive@[]{@arrayValues@};
        // Create 3x2 @matlabClass@ matrix.
        ML@matlabClassCamelCase@ array1D = new ML@matlabClassCamelCase@(name, src, 3);

        // Test 2D array coresponding to test vector
        @primitive@[][] src2D = new @primitive@[][]{@matrixValues@};
        // Test 2D constructor.
        MLArray array2D = new ML@matlabClassCamelCase@(name, src2D);

        // Compare it with the original.
        assertEquals("Test if @primitive@[][] constructor produces the same matrix as @primitive@[].", array1D, array2D);

        // Write array to file.
        new MatFileWriter(fileName, Arrays.asList((MLArray)array1D));

        // Read array from file.
        MatFileReader mfr = new MatFileReader(fileName);
        ML@matlabClassCamelCase@ ret = (ML@matlabClassCamelCase@)mfr.getMLArray(name);

        // Test if MLArray objects are equal
        assertEquals("Test if value read from file equals value stored.", array1D, ret);

        // Test if 2D array match
        for (int i = 0; i < src2D.length; ++i)
            assertTrue("Test if the 2D arrays match.", Arrays.equals(src2D[i], ret.getArray()[i]));
    }

    @Test
    public void test@matlabClassCamelCase@Benchmark() throws Exception {
        final String fileName = "big-@matlabClass@-tmp.mat";
        final String name = "big@matlabClass@";
        final int SIZE = 1024;

        ML@matlabClassCamelCase@ src = new ML@matlabClassCamelCase@(name, new int[]{SIZE, SIZE});

        // Write the array to file.
        new MatFileWriter(fileName, Arrays.asList((MLArray)src));

        //read array form file
        MatFileReader mfr = new MatFileReader(fileName);
        ML@matlabClassCamelCase@ ret = (ML@matlabClassCamelCase@)mfr.getMLArray(name);

        final long start = System.nanoTime();
        for (int i = 0; i < ret.getSize(); ++i)
            ret.get(i);
        final long stop = System.nanoTime();
        System.out.println("--> " + (stop - start) / 1e6 +  "[ns]");

        // Test if MLArray objects are equal.
        assertEquals("Test if value read from file equals the value stored.", src, ret);
    }
}
