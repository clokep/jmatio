package com.jmatio.types;

import com.jmatio.common.MatLevel5DataTypes;

/**
 * Class represents @matlabClass@ (@primitive@) array (matrix)
 *
 * @author Wojciech Gradkowski <wgradkowski@gmail.com>
 */
public class ML@matlabClassCamelCase@ extends MLU@matlabClassCamelCase@ {
    protected int matDataType = MatLevel5DataTypes.mi@matlabArrayType@;

    /**
     * Normally this constructor is used only by MatFileReader.
     *
     * @param name array name
     * @param dims array dimensions
     * @param whether the array is complex
     * @param whether the array is global
     * @param whether the array is logical
     */
    public ML@matlabClassCamelCase@(String name, int[] dims, boolean complex, boolean global, boolean logical) {
        super(name, dims, complex, global, logical);
    }

    /**
     * Create a <code>{@link ML@matlabClassCamelCase@}</code> array with given name,
     * and dimensions.
     *
     * @param name array name
     * @param dims array dimensions
     */
    public ML@matlabClassCamelCase@(String name, int[] dims) {
        super(name, dims);
    }
    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a 2D real matrix from a one-dimensional packed array
     *
     * @param name array name
     * @param vals One-dimensional array of doubles, packed by columns (ala Fortran).
     * @param m Number of rows
     */
    public ML@matlabClassCamelCase@(String name, @NumberClass@[] vals, int m) {
        super(name, vals, m);
        //this.type = MatLevel5DataTypes.mx@matlabArrayType@_CLASS;
        // XXX
    }

    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a 2D real matrix from <code>byte[][]</code>
     *
     * Note: array is converted to Byte[]
     *
     * @param name array name
     * @param vals two-dimensional array of values
     */
    public ML@matlabClassCamelCase@(String name, @primitive@[][] vals) {
        this(name, ML@matlabClassCamelCase@.primitive2DToObject(vals), vals.length);
    }
    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a matrix from a one-dimensional packed array
     *
     * @param name array name
     * @param vals One-dimensional array of doubles, packed by columns (ala Fortran).
     * @param m Number of rows
     */
    public ML@matlabClassCamelCase@(String name, @primitive@[] vals, int m) {
        this(name, MLU@matlabClassCamelCase@.castToObject(vals), m);
    }
}
