package com.jmatio.types;

import java.nio.ByteBuffer;

/**
 * Class represents @matlabClass@ (@primitive@) array (matrix).
 *
 * @author Wojciech Gradkowski <wgradkowski@gmail.com>
 */
public class ML@matlabClassCamelCase@ extends MLNumericArray<@NumberClass@> {
    /**
     * Normally this constructor is used only by MatFileReader.
     *
     * @param name array name
     * @param dims array dimensions
     * @param type array type: here <code>mx@matlabArrayType@_CLASS</code>
     * @param attributes array flags
     */
    public ML@matlabClassCamelCase@(String name, int[] dims, int type, int attributes) {
        super(name, dims, type, attributes);
    }

    /**
     * Create a <code>{@link ML@matlabClassCamelCase@}</code> array with given name,
     * and dimensions.
     *
     * @param name array name
     * @param dims array dimensions
     */
    public ML@matlabClassCamelCase@(String name, int[] dims) {
        super(name, dims, MLArray.mx@matlabArrayType@_CLASS, 0);
    }

    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a 2D real matrix from a one-dimensional packed array
     *
     * @param name array name
     * @param vals One-dimensional array of @NumberClass@, packed by columns (ala Fortran).
     * @param m Number of rows
     */
    public ML@matlabClassCamelCase@(String name, @NumberClass@[] vals, int m) {
        super(name, MLArray.mx@matlabArrayType@_CLASS, vals, m);
    }

    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a 2D real matrix from <code>@primitive@[][]</code>
     *
     * Note: array is converted to @NumberClass@[]
     *
     * @param name array name
     * @param vals two-dimensional array of values
     */
    public ML@matlabClassCamelCase@(String name, @primitive@[][] vals) {
        this(name, ML@matlabClassCamelCase@.primitive2DToObject(vals), vals.length);
    }

    /**
     * <a href="http://math.nist.gov/javanumerics/jama/">Jama</a> [math.nist.gov] style:
     * construct a matrix from a one-dimensional packed array
     *
     * @param name array name
     * @param vals One-dimensional array of @primitive@, packed by columns (ala Fortran).
     * @param m Number of rows
     */
    public ML@matlabClassCamelCase@(String name, @primitive@[] vals, int m) {
        this(name, ML@matlabClassCamelCase@.castToObject(vals), m);
    }

    /**
     * @param vector
     */
    public void set(@primitive@[] vector) {
        this.set(ML@matlabClassCamelCase@.castToObject(vector));
    }

    /* (non-Javadoc)
     * @see com.jmatio.types.GenericArrayCreator#createArray(int, int)
     */
    public @NumberClass@[] createArray(int m, int n) {
        return new @NumberClass@[m * n];
    }

    /**
     * Gets two-dimensional real array.
     *
     * @return 2D real array
     */
    public @primitive@[][] getArray() {
        final int M = this.getM();
        final int N = this.getN();
        @primitive@[][] result = new @primitive@[M][];

        for (int m = 0; m < M; ++m) {
           result[m] = new @primitive@[N];

            for (int n = 0; n < N; ++n)
                result[m][n] = this.getReal(m, n);
        }
        return result;
    }

    /**
     * Casts <code>@primitive@[]</code> to <code>@NumberClass@[]</code>
     *
     * @param d <code>@primitive@[]</code>
     * @return result <code>@NumberClass@[]</code>
     */
    protected static @NumberClass@[] castToObject(@primitive@[] d){
        @NumberClass@[] dest = new @NumberClass@[d.length];
        for (int i = 0; i < d.length; ++i)
            dest[i] = (@NumberClass@)d[i];
        return dest;
    }

    /**
     * Converts <code>@primitive@[][]</code> to <code>@NumberClass@[][]</code>
     *
     * @param dd <code>@primitive@[][]</code>
     * @return result <code>@NumberClass@[][]</code>
     */
    protected static @NumberClass@[] primitive2DToObject (@primitive@[][] dd) {
        @NumberClass@[] d = new @NumberClass@[ dd.length*dd[0].length ];
        for (int n = 0; n < dd[0].length; ++n) {
            for (int m = 0; m < dd.length; ++m)
                d[m + n * dd.length] = dd[m][n];
        }
        return d;
    }

    public @NumberClass@ buildFromBytes(byte[] bytes) {
        if (bytes.length != this.getBytesAllocated()) {
            throw new IllegalArgumentException(
                        "To build from byte array I need array of size: "
                                + this.getBytesAllocated() );
        }
        return ByteBuffer.wrap(bytes).get@primitiveCamelCase@();
    }

    public int getBytesAllocated() {
        return @NumberClass@.SIZE >> 3;
    }

    public Class<@NumberClass@> getStorageClazz() {
        return @NumberClass@.class;
    }

    public byte[] getByteArray(@NumberClass@ value) {
        ByteBuffer buff = ByteBuffer.allocate(this.getBytesAllocated());
        buff.put@primitiveCamelCase@(value);
        return buff.array();
    }
}
