<?xml version="1.0"?>
<!-- ======================================================================
     JMatIO
     The Matlab MAT-file IO API in Java

     wgradkowski
     ====================================================================== -->
<project name="JMatIO" default="package">
    <description>
        The Matlab MAT-file IO API in Java
    </description>

    <!-- =================================
          target: init
         ================================= -->
    <target name="init" description="--> initialization">

        <property name="name" value="jmatio"/>
        <property name="version" value="0.2"/>
        <property name="author" value="Wojciech Gradkowski"/>
        <property name="year" value="2007"/>



        <property name="dev.dir" location="${basedir}"/>
        <property name="dev.src" location="${dev.dir}\prod"/>
        <property name="dev.extern" location="${dev.dir}\extern"/>
        <property name="dev.native" location="${dev.dir}\native"/>
        <property name="dev.test" location="${dev.dir}\test"/>

        <property name="build.dir" location="${basedir}\build"/>
        <property name="build.bin" location="${build.dir}\bin"/>
        <property name="build.extern" location="${build.dir}\extern"/>
        <property name="build.native" location="${build.dir}\native"/>
        <property name="build.package" location="${build.dir}\lib"/>
        <property name="build.test.bin" location="${build.dir}\test"/>
        <property name="build.resource" location="${build.dir}\"/>
        <property name="build.javadocs" location="${build.dir}\doc"/>

    </target>

    <!-- =================================
          target: copy-resources
         ================================= -->
    <target name="copy-resources" depends="init" description="--> Copies resource files">
        <copy todir="${build.resource}">
            <fileset dir="${dev.dir}">
                <include name="*.txt"/>
            </fileset>
        </copy>
    </target>

    <!-- Runs MATLAB and executes the specified command. -->
    <macrodef name="copy-and-replace">
        <attribute name="NumberClass" />
        <attribute name="primitive" />
        <attribute name="primitive2" default="@{NumberClass}" />
        <attribute name="MATLABArrayType" />
        <attribute name="MATLABClass" />

        <sequential>
            <echo message="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" />
            <copy file="${dev.src}/com/jmatio/types/MLUIntNN.java.in"
                  tofile="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" overwrite="true" />
            <replace file="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" token="@NumberClass@" value="@{NumberClass}" />
            <replace file="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" token="@primitive@" value="@{primitive}" />
            <replace file="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" token="@primitive2@" value="@{primitive2}" />
            <replace file="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" token="@MATLABArrayType@" value="@{MATLABArrayType}" />
            <replace file="${dev.src}/com/jmatio/types/ML@{MATLABClass}.java" token="@MATLABClass@" value="@{MATLABClass}" />
        </sequential>
    </macrodef>

    <target name="generate-source" depends="init" description="--> Copies resource files">
        <copy-and-replace NumberClass="Long" primitive="long" MATLABArrayType="UINT64" MATLABClass="UInt64" />
        <copy-and-replace NumberClass="Integer" primitive="int" primitive2="Int" MATLABArrayType="UINT32" MATLABClass="UInt32" />
        <copy-and-replace NumberClass="Short" primitive="short" MATLABArrayType="UINT16" MATLABClass="UInt16" />
    </target>

    <!-- =================================
          target: compile
         ================================= -->
    <target name="compile" depends="copy-resources,generate-source" description="--> Compiles source folder">
        <mkdir dir="${build.bin}"/>
        <javac srcdir="${dev.src}"
               destdir="${build.bin}"
               classpath=""
               debug="no"
               optimize="yes"
               target="1.5"
        />
    </target>

    <target name="compile-test" depends="compile" description="--> Compiles test folder">
        <mkdir dir="${build.test.bin}"/>

        <javac srcdir="${dev.test}" destdir="${build.test.bin}">
            <classpath>
                <pathelement path="${build.bin}"/>
                <fileset dir="${basedir}/lib" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-test" description="--> Run JUnit tests">
        <mkdir dir="${build.test.bin}/reports"/>
        <copy todir="${build.test.bin}">
            <fileset dir="${dev.test}">
                <include name="*.mat"/>
            </fileset>
        </copy>

        <junit fork="true" forkmode="once" printsummary="on" dir="${build.dir}">
            <classpath>
                <pathelement path="${build.bin}"/>
                <pathelement path="${build.test.bin}"/>
                <fileset dir="${basedir}/lib" includes="*.jar"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest todir="${build.test.bin}/reports">
                <fileset dir="${build.test.bin}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <delete dir="${build.dir}" includes="*.mat"/>
    </target>

    <!-- =================================
          target: package
         ================================= -->
    <target name="package" depends="compile" description="--> Creates a .jar package">
        <mkdir dir="${build.bin}/META-INF"/>
        <manifest file="${build.bin}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
        </manifest>

        <mkdir dir="${build.package}"/>
        <jar destfile="${build.package}\${name}.jar"
            excludes="META-INF/MANIFEST.MF"
            manifest="${build.bin}/META-INF/MANIFEST.MF"
            basedir="${build.bin}"
        />
    </target>

    <!-- =================================
          target: clean
         ================================= -->
    <target name="clean" depends="init" description="--> Performs clean">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="init" description="Creates the API documentation">
        <mkdir dir="${build.javadocs}"/>
        <javadoc packagenames="*" sourcepath="${dev.src}"
            destdir="${build.javadocs}" author="true" version="true" use="true"
            splitindex="true" noindex="false" windowtitle="${ant.project.name} v${version}"
            doctitle="${ant.project.name} v${version}&lt;br&gt;API Specification"
            header="&lt;b&gt;${ant.project.name}&lt;br&gt;&lt;font size='-1'&gt;${version}&lt;/font&gt;&lt;/b&gt;"
            bottom="Copyright &#169; ${year} ${author}. All Rights Reserved.">
        </javadoc>
    </target>
</project>
