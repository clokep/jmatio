<?xml version="1.0"?>
<project name="JMatIO" default="package">
    <description>
        The Matlab MAT-file IO API in Java
    </description>

    <!-- Set up paths and variables. -->
    <target name="init" description="--> initialization">
        <property name="name" value="jmatio"/>
        <property name="version" value="0.5"/>
        <property name="author" value="Wojciech Gradkowski, Patrick Cloke"/>
        <property name="year" value="2007 - 2012"/>

        <property name="dev.dir" location="${basedir}"/>
        <property name="dev.src" location="${dev.dir}\prod"/>
        <property name="dev.extern" location="${dev.dir}\extern"/>
        <property name="dev.native" location="${dev.dir}\native"/>
        <property name="dev.test" location="${dev.dir}\test"/>

        <property name="build.dir" location="${basedir}\build"/>
        <property name="build.bin" location="${build.dir}\bin"/>
        <property name="build.extern" location="${build.dir}\extern"/>
        <property name="build.native" location="${build.dir}\native"/>
        <property name="build.package" location="${build.dir}\lib"/>
        <property name="build.test.bin" location="${build.dir}\test"/>
        <property name="build.resource" location="${build.dir}\"/>
        <property name="build.javadocs" location="${build.dir}\doc"/>
    </target>

    <!-- Copy the license and readme files. -->
    <target name="copy-resources" depends="init" description="--> Copies resource files">
        <copy todir="${build.resource}">
            <fileset dir="${dev.dir}">
                <include name="*.txt"/>
            </fileset>
        </copy>
    </target>

    <macrodef name="generate-from-template">
        <text name="keys"/>
        <attribute name="dir" />
        <attribute name="template.file" />
        <attribute name="dst.file" />

        <sequential>
            <copy file="@{dir}/@{template.file}.java.in"
                  tofile="@{dir}/@{dst.file}.java" overwrite="true" />

            <script language="javascript"> <![CDATA[
                var filename = "@{dir}/@{dst.file}.java";

                // Read in the contents of the file.
                var scanner = null;
                var contents = "";
                try {
                    scanner = new java.util.Scanner(new java.io.File(filename));
                    scanner.useDelimiter("\\Z");
                    contents = scanner.next();
                } finally {
                    if (scanner != null)
                        scanner.close();
                }

                // Do the find and replace on it.
                var keys = eval("(@{keys})");
                var key;
                for (key in keys)
                    contents = contents.replace("@" + key + "@", keys[key]);

                // Write the file back out.
                var output = null;
                try {
                    output = java.io.BufferedWriter(new java.io.FileWriter(filename));
                    output.write(contents);
                } finally {
                    if (output != null)
                        output.close();
                }
            ]]></script>
        </sequential>
    </macrodef>

    <macrodef name="generate-MLNumeric">
        <attribute name="NumberClass" />
        <attribute name="primitive" />
        <attribute name="matlabClass" />
        <attribute name="dir" default="prod/com/jmatio/types" />
        <attribute name="template" default="MLNumeric" />
        <!-- Used for generating test cases. -->
        <attribute name="minValue" default="" />
        <attribute name="maxValue" default="" />
        <attribute name="suffix" default="" />
        <attribute name="arrayValues" default="1, 2, 3, 4, 5, 6" />
        <attribute name="matrixValues" default="{1, 4}, {2, 5}, {3, 6}" />

        <sequential>
            <script language="javascript"> <![CDATA[
                function camelCase(aStr) {
                    if (aStr[0] == "u")
                        return aStr.slice(0, 2).toUpperCase() + aStr.slice(2);
                    return aStr[0].toUpperCase() + aStr.slice(1);
                }

                function stringify(aObj) {
                    var str = "{";
                    for (var param in aObj)
                        str += param + ": '" + aObj[param] + "', ";
                    // Remove the last ", " and add a closing brace.
                    str = str.slice(0, -2) + "}";
                    return str;
                }

                var params = {
                    NumberClass: "@{NumberClass}",
                    primitive: "@{primitive}",
                    primitiveCamelCase: camelCase("@{primitive}"),
                    matlabClass: "@{matlabClass}",
                    matlabClassCamelCase: camelCase("@{matlabClass}"),
                    matlabArrayType: "@{matlabClass}".toUpperCase(),
                    minValue: "@{minValue}",
                    maxValue: "@{maxValue}",
                    arrayValues: "@{arrayValues}",
                    matrixValues: "@{matrixValues}"
                };

                var callTask = project.createTask("generate-from-template");
                callTask.setDynamicAttribute("dir", "@{dir}");
                callTask.setDynamicAttribute("template.file", "@{template}");
                callTask.setDynamicAttribute("dst.file", "ML" + params.matlabClassCamelCase + "@{suffix}");
                callTask.addText(stringify(params));
                callTask.perform();
            ]]></script>
        </sequential>
    </macrodef>

    <target name="generate-source" depends="init">
        <generate-MLNumeric NumberClass="Short" primitive="short" matlabClass="uint16" />
        <generate-MLNumeric NumberClass="Integer" primitive="int" matlabClass="uint32" />
        <generate-MLNumeric NumberClass="Long" primitive="long" matlabClass="uint64" />

        <generate-MLNumeric template="MLIntNN" NumberClass="Byte" primitive="byte" matlabClass="int8" />
        <generate-MLNumeric template="MLIntNN" NumberClass="Short" primitive="short" matlabClass="int16" />
        <generate-MLNumeric template="MLIntNN" NumberClass="Integer" primitive="int" matlabClass="int32" />
        <generate-MLNumeric template="MLIntNN" NumberClass="Long" primitive="long" matlabClass="int64" />

        <generate-MLNumeric NumberClass="Double" primitive="double" matlabClass="Double" />
        <generate-MLNumeric NumberClass="Float" primitive="float" matlabClass="Single" />
    </target>

    <target name="generate-test-source" depends="init">
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Byte" primitive="byte" matlabClass="int8"
                            minValue="Byte.MIN_VALUE" maxValue="Byte.MAX_VALUE" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Byte" primitive="byte" matlabClass="uint8"
                            minValue="0" maxValue="-1" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Short" primitive="short" matlabClass="int16"
                            minValue="Short.MIN_VALUE" maxValue="Short.MAX_VALUE" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Short" primitive="short" matlabClass="uint16"
                            minValue="0" maxValue="-1" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Integer" primitive="int" matlabClass="int32"
                            minValue="Integer.MIN_VALUE" maxValue="Integer.MAX_VALUE" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Integer" primitive="int" matlabClass="uint32"
                            minValue="0" maxValue="-1" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Long" primitive="long" matlabClass="int64"
                            minValue="Long.MIN_VALUE" maxValue="Long.MAX_VALUE" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Long" primitive="long" matlabClass="uint64"
                            minValue="new Long(0)" maxValue="new Long(-1)" />

        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Double" primitive="double" matlabClass="double"
                            minValue="-1.1" maxValue="1.1"
                            arrayValues="1.1, 2.2, 3.3, 4.4, 5.5, 6.6" matrixValues="{1.1, 4.4}, {2.2, 5.5}, {3.3, 6.6}" />
        <generate-MLNumeric dir="test/com/jmatio/types" template="MLNumericTest" suffix="Test"
                            NumberClass="Float" primitive="float" matlabClass="single"
                            minValue="-1.1f" maxValue="1.1f"
                            arrayValues="1.1f, 2.2f, 3.3f, 4.4f, 5.5f, 6.6f" matrixValues="{1.1f, 4.4f}, {2.2f, 5.5f}, {3.3f, 6.6f}" />
    </target>

    <target name="compile" depends="generate-source" description="--> Compiles source folder">
        <mkdir dir="${build.bin}"/>
        <javac srcdir="${dev.src}"
               destdir="${build.bin}"
               debug="no"
               includeantruntime="no"
               target="1.5" />
    </target>

    <target name="compile-test" depends="generate-test-source,compile" description="--> Compiles test folder">
        <mkdir dir="${build.test.bin}"/>

        <javac srcdir="${dev.test}"
               destdir="${build.test.bin}"
               debug="no"
               includeantruntime="no"
               target="1.5" >
            <classpath>
                <pathelement path="${build.bin}"/>
                <fileset dir="${basedir}/lib" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-test" description="--> Run JUnit tests">
        <mkdir dir="${build.test.bin}/reports"/>
        <copy todir="${build.test.bin}">
            <fileset dir="${dev.test}">
                <include name="*.mat"/>
            </fileset>
        </copy>

        <junit fork="true" forkmode="once" printsummary="on" dir="${build.dir}">
            <classpath>
                <pathelement path="${build.bin}"/>
                <pathelement path="${build.test.bin}"/>
                <fileset dir="${basedir}/lib" includes="*.jar"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest todir="${build.test.bin}/reports">
                <fileset dir="${build.test.bin}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <!--<delete dir="${build.dir}" includes="*.mat"/>-->
    </target>

    <target name="package" depends="compile,copy-resources" description="--> Creates a .jar package">
        <mkdir dir="${build.bin}/META-INF"/>
        <manifest file="${build.bin}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
        </manifest>

        <mkdir dir="${build.package}"/>
        <jar destfile="${build.package}\${name}.jar"
            excludes="META-INF/MANIFEST.MF"
            manifest="${build.bin}/META-INF/MANIFEST.MF"
            basedir="${build.bin}"
        />
    </target>

    <target name="clean" depends="init" description="--> Performs clean">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>

    <!-- Creates the API documentation. -->
    <target name="javadoc" depends="init,generate-source" description="Creates the API documentation">
        <mkdir dir="${build.javadocs}"/>
        <javadoc packagenames="*" sourcepath="${dev.src}"
            destdir="${build.javadocs}" author="true" version="true" use="true"
            splitindex="true" noindex="false" windowtitle="${ant.project.name} v${version}"
            doctitle="${ant.project.name} v${version}&lt;br&gt;API Specification"
            header="&lt;b&gt;${ant.project.name}&lt;br&gt;&lt;font size='-1'&gt;${version}&lt;/font&gt;&lt;/b&gt;"
            bottom="Copyright &#169; ${year} ${author}. All Rights Reserved.">
        </javadoc>
    </target>
</project>
